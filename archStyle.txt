10. architectural style ที่ใช้จะเป็น Broker Pattern 
เนื่องด้วยการ merge รวมกันของทั้งสองบริษัทนั้นยังคงจะต้องใช้ Services เติมที่มีอยู่ของทั้งสองบริษัทการเลือกใช้
 Intermediate Broker ก็เป็นทางเลือกที่ดีเพราะจะลด cost ได้เยอะมากกว่าการเอา service มารวม เพื่อให้เป็น service ไหม่อีกที
รวมถึงการใช้ broker นั้น Users ไม่จำเป็นต้องแคร์ว่าผู้ให้บริการเป็นใครทำให้ไม่กระทบ Users เก่าที่ใช้งานอยู่
ในส่วนปรับปรุงเปลี่ยนแปลงบริการต่างๆ ที่มีแนวโน้มเพิ่มสูงนั้น ก็สอดคล้องกับ Broker ที่กำลังชูเรื่องของ modifiability อยู่แต่เดิม แถมทั้งยังสามารถใช้ Intermediate tactic ได้อีกด้วย

สรุุปคือ Broker Pattern เหมาะสมกับสถานการณ์ที่ 1

11.สถานการณ์ที่ 2 Publish-Subscribe pattern
จะพบว่ามีการแบ่งตัว Subscriber ไว้เป็น 3 รูปแบบที่ต้องการรับข้อมูลที่แตกต่างกัน
ด้วยแนวทางของ pub/sub นั้นในตัว middleware จะมี component ข้างในไว้คอยจัดการหรือจำแนกข้อมูล(ในเชิงของข่าว)
และในตัว component ข้างต้นก็จะถูก binding โดย Publisher และ Subscriber ที่สนใจตัวเนื้อหาคอนเท้นที่ตรงกันได้

13.สถานการณ์ที่ 4 ส่วนตัวมองว่าเป็นลักษณะ P2P
จากการวิเคราะห์จะพบว่าสถานการณ์ดังกล่าวจะพบว่า user สามารถ forward ข้อความไปมาหากันได้
จึงมองว่าเป็นการทำงานเป็นลักณะ decentralized หรือไม่มีตัวกลางนั้นเอง

และ P2P นั้น support เรื่องการติดต่อกันระหว่าง node ได้
ซึ่งนั้นจะตรงกับผู้ใช้งานสามารถรับและส่งต่อข่าวที่ตัวเองได้รับไปยังผู้ใช้งานด้วยกันเองได้โดยไม่ต้องอาศัยตัวกลาง
 
จึงสรุปว่า สถานการณ์ที่ 4 นั้นหมาะกับ P2P PATTERN 
แต่การใช้ P2P Provider และ user จะต้องคำนึงถึงเรื่อง security ของข้อมูลในการส่งข้อมูลด้วย


14.สถานการณ์ที่เลือกใช้ Map Reduce Pattern
หากมองแบบง่ายๆ เนื่องด้วย map reduce นั้นสามารถทำการจำแนกข้อมูลออกมาตามเงื่อนไขที่ต้อง(map)
และทำการ reduces shuffle  หรือแบ่งแยกตัว data (ที่อยู่ในรูป key/value) จากก้อนเดียวเป็นหลายก้อน (Reducer)
เนื่องด้วยการแตกออกมาหลายก้อนจะพบว่าตัว Reducer นั้นไม่ได้มีความเกี่ยวข้องกันในเชิงลำดับการทำงานส่งผลให้
ตัว Reducer นั้นสามารถทำงานเป็นลักษณะ concurrent ได้ และจะส่งผลให้เวลาในการประมวลผลลดลงอย่างมาก

สถานการณ์ที่ 5 นั้นมีข้อมูลหลายล้าน record การเลือกใช้และต้องการการประมวลผลในเวลามี่จำกัด map/reduce จึงตอบโจทย์ในสสถานการณ์ดังกล่าว


15.สถานการณ์ที่ 6 เลือกใช้ในรูปแบบ MVC 
จากการวิเคราะห์จะพบว่าในส่วนการ visualization ข้อมูลเทียบกับเวลา 
นั้นมีการ interaction กับ user ที่เป็นแบบไกล้เคียง real-time
จึงกล่าวได้ว่าในส่วนที่เป็น User interface นั้นจะต้องมีความไวในการตอบสนอง 
ซึ่งในรูปแบบ MVC นั้นตอบโจทย์ หากเราดูตาม diagram ของ MVC 
จะพบว่า View จะได้รับการ Trigger หรือ query state  จาก Models โดยตรง
นั้นหมายถึงหาก models มีการเปลี่ยนแปลงใน่ส่วน View ก็จะมีการ Re-render ไหม่ได้ทันที

และเนื่องด้วยการ visualization นั้นมีหลายรูปแบบเช่น pie chart ก็ต้องการใช้การ transform อีกแบบนึง , Line Chart  ก็อีกแบบนึง และคุณสมบัติของ MCV คือตัวระบบสามารถมี models หรือส่วนที่เป็น business state กี่ตัวก็ได่ แต่ต้องมีอย่างละ 1 ตัวขึ้นไป
ทำให้การ transform data นั้นหลากหลายและนำมาใช้ตรงตาม visualization models ที่จะสื่อ

สรุปคิอ MVC เหมาะ system ที่ต้องการ การตอบสนองที่รวดเร็วและ support business logic ที่หลากหลาย 
ซึ่งจะตรงกับสถานการณ์ที่ 6