2.(1 คะแนน) คำกล่าวที่ว่า “Functionality and quality attributes are orthogonal" หมายความว่าอย่างไร?
ans = เป็นความสัมพันธ์ระหว่าง Functionality และ quality attributes ที่มองเป็น 2D plane ที่มีแกน x , y 
ตัวอย่างคือ เราสามารถคง quality attributes ไว้เช่นเดิม โดยมี Functionality ที่หลากหลายมาตอบสนอง  quality attributes ได้

3.การคิดหรือสร้างเงื่อนไขหรือข้อจำกัดขึ้นมาเพื่อลดความเสี่ยงที่จะเกิดข้อผิดพลาดในระบบต่างๆ โดยตัว Architecture ที่สร้างขึ้นมานั้นก็จะมี quality attributes ที่ชูโรงของตัวเอง และมีลักษณะการใช้งานที่เหมาะสมแตกต่างกันออกไป จึงขอสรุปว่าเหตุผลที่ใช้เลือกใช้หรือตัดสินใจเชิงสถาปัตยกรรมนั้นก็เพื่อให้ลดความผิดพลาดที่อาจจะเกิดขึ้นทั้งในปัจจัยต่างๆ เช่นปัจจัยของ hardware , ปัจจัยของ user ,ปัจจัยของ complier หรืออื่นๆ
ตัวอย่างเช่นหากทำ application ที่ตอบสนองกับ client ได้รวดเร็ว , real-time เราควรจะเลือกใช้ MVC > N-tier เป็นต้น

4.Waterfall , Incremental , Agile
Waterfall Design ตามขั้นตอนโดยละเอียด และมีขั้นตอนอย่างชัดเจน
โดยจะเริ่มจากการเก็บ requirements จาก user หรือ product owner แล้วเริ่มทำการ design architect , ux/ui โดยให้แต่ละทีมมาออกความเห็น จากนั้นก็เข้าสู่กระบวนการนำ design  มา implement แล้วนำไป test และ ส่ง production  ต่อไป

5.จาก deployment diagram แสดงโครงสร้างระบบสถาปัตยกรรมแบบ 3-Tier จงแสดงการคำนวณหา availability ของระบบ และคำนวณคำตอบที่มีทศนิยมไม่น้อยกว่า 4 ตำแหน่ง
กำหนดให้ availability สำหรับ node ประเภทต่างๆ มีค่าดังต่อไปนี้
99.0% สำหรับ Web Server (WebServer)
90.0% สำหรับ Application Server (AppServer) และให้ถือว่าระบบยัง available เมื่อมีอย่างน้อย 1 instance ที่ยังทำงานได้
95.0% สำหรับ Database Server (DBServer) และให้ถือว่าระบบยัง available เมื่อมีอย่างน้อย 1 instance ที่ยังทำงานได้

Websever = 0.9900
AppSever = 1-(( 1 - 0.9000) * ( 1 - 0.9000) *( 1 - 0.9000)) = 0.999
BDSever= 1-(( 1 - 0.9500) * ( 1 - 0.9500)) = 0.9975
A(WebServer) * A(AppSever ) * A(BDSever) = 0.9900 * 0.999 *  0.9975
System availability = 0.986537475

6.ไม่เห็นด้วยในข้อความข้างต้น "จึงเป็นเพียงการตกลงเลือกใช้มาตรฐานต่างๆ ให้ตรงกัน" ใน quote นี้จะกล่าวว่า "เป็นเพียง" 
นั้นตีความได้ว่าจากรูปแบบของข้อมูลข้างต้นนั้นใช้ "เพียงแค่" มาตรฐานที่ตรงกันก็เพียงพอ

ซึ่งในความจริง "แค่มาตรฐานที่ตรงกันนั้นไม่เพียงพอ" ต่อคุณสมบัติ interoperable 
กล่าวคือ คุณสมบัติ interoperable นั้นต้องไปดูในเรื่องของความถูกต้องใน context ของข้อมูลขาเข้า และต้องถูกต้อง 100% ในข้อมูลเชิงขาออก จึงจะเป็น สมบัติ interoperable ทีสมบูรณ์ยิ่งขึ้น

7.เนื่องด้วย UML diagram นั้นจะบอกถึง relations ของแต่ละ module ที่จะบอกว่า module มี dependency กันหรือเปล่า ?
หากแก้ใข Module นี้จะมีผลกระทบต่อ module อื่นๆ อย่างไร

สรุปคือ UML ช่วยได้อย่างมากในการมองภาพรวม coupling และช่วยให้การมองหรือการวิเคราะห์ง่ายขึ้น

8.

9.ยกตัวอย่างระบบง่ายๆ เช่น ระบบ Register บน web application หากจะเพิ่ม Security 
ให้กับระบบในส่วน password หรือ key นั้นจะต้องมีความซับซ้อนมากขึ้น เช่น ตัวอักษรต้องผสมกันระหว่างพิมใหญ่ - พิมเล็ก 
ต้องปนกับตัวเลขอย่างน้อย 3 ตัว และต้องมีตัวอักษรพิเศษอย่างน้อย 1 ตัว 
จะเห็นการว่าการเพิ่ม Security นั้นจะส่งผลต่อ Usability ของ User ลดลด จะทำให้ User นั้นรู้สึกว่ายาก 
และใช้เวลาเรียนรู้นานหรือเลิกใช้ application ไปเลยก็มี

10.